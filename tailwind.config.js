/** @type {import('tailwindcss').Config} */


const graphStyle = {
  agent: '#930D0D',
  agentBg: '#930D0DC4',
  state: '#4E0D93',
  stateBg: '#4E0D93C4',
  qa_state: '#0D7693',
  qa_stateBg: '#0D7693C4',
  ner_state: '#0D935B',
  ner_stateBg: '#0D935BC4',
  ner_response: '#71930D',
  ner_responseBg: '#71930DC4',
  response: '#935B0D',
  responseBg: '#935B0DC4',
  prompt_root: '#930D8C',
  prompt_rootBg: '#930D8CC4',
  state_response_root: '#93310D',
  state_response_rootBg: '#93310DC4',
  prompt: '#930D62',
  promptBg: '#930D62C4',
  entity_set_root: '#0D3A93',
  entity_set_rootBg: '#0D3A93C4',
  entity_set: '#0D1193',
  entity_setBg: '#0D1193C4',
  res_entity_set: '#0D9354',
  res_entity_setBg: '#0D9354C4',
  training_data_root: '#88930D',
  training_data_rootBg: '#88930DC4',
  training_data: '#0D7A93',
  training_dataBg: '#0D7A93C4',
  adapter: '#0D9371',
  adapterBg: '#0D9371C4',

}

module.exports = {
  content: ["./app/**/*.{ts,tsx,js,jsx}"],
  theme: {
    extend: {
      colors: {
        agent: graphStyle.agent,
        agentBg: graphStyle.agentBg,
        state: graphStyle.state,
        stateBg: graphStyle.stateBg,
        qaState: graphStyle.qa_state,
        qaStateBg: graphStyle.qa_stateBg,
        nerState: graphStyle.ner_state,
        nerStateBg: graphStyle.ner_stateBg,
        nerResponse: graphStyle.ner_response,
        nerResponseBg: graphStyle.ner_responseBg,
        stateResponse: graphStyle.response,
        stateResponseBg: graphStyle.responseBg,
        promptRoot: graphStyle.prompt_root,
        promptRootBg: graphStyle.prompt_rootBg,
        prompt: graphStyle.prompt,
        promptBg: graphStyle.promptBg,
        stateResponseRoot: graphStyle.state_response_root,
        stateResponseRootBg: graphStyle.state_response_rootBg,
        entitySetRoot: graphStyle.entity_set_root,
        entitySetRootBg: graphStyle.entity_set_rootBg,
        entitySet: graphStyle.entity_set,
        entitySetBg: graphStyle.entity_setBg,
        trainingDataRoot: graphStyle.training_data_root,
        trainingDataRootBg: graphStyle.training_data_rootBg,
        trainingData: graphStyle.training_data,
        trainingDataBg: graphStyle.training_dataBg,
        resEntitySet: graphStyle.res_entity_set,
        resEntitySetBg: graphStyle.res_entity_setBg,
        adapter: graphStyle.adapter,
        adapterBg: graphStyle.adapterBg,
      },

    },
  },
  plugins: [],
}

